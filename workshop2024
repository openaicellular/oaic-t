1
00:00:00,000 --> 00:00:05,000
Quick Installation

2
00:00:05,001 --> 00:00:10,000
We are using VM on Google Cloud with 16 core processors and 64GB of RAM

3
00:00:10,001 --> 00:00:15,000
Better to set up your VM with Max capacity

4
00:00:15,001 --> 00:00:20,000
Better to do ‘sudo -i’ and then redirect to /home/user directory

5
00:00:20,001 --> 00:00:25,000
First please install VNC Viewer on your OS

6
00:00:25,001 --> 00:00:30,000
Config VNC port on your Google Cloud and set the port 5901 and tag

7
00:00:30,001 --> 00:00:35,000
sudo -i

8
00:00:35,001 --> 00:00:40,000
go to the root home

9
00:00:40,001 --> 00:00:45,000
git clone https://github.com/openaicellular/main-file-repo.git

10
00:00:45,001 --> 00:00:50,000
cd main-file-repo

11
00:00:50,001 --> 00:00:55,000
chmod +x setup-vnc.sh

12
00:00:55,001 --> 00:01:00,000
sudo ./setup-vnc.sh

13
00:01:00,001 --> 00:01:05,000
enter a password for your VNC server

14
00:01:05,001 --> 00:01:10,000
gnome-terminal

15
00:01:10,001 --> 00:01:15,000
chmod +x ricinstallation.sh

16
00:01:15,001 --> 00:01:20,000
sudo ./ricinstallation.sh

17
00:01:20,001 --> 00:01:25,000
sudo kubectl get pods -A

18
00:01:25,001 --> 00:01:30,000
cp -f -r srsrandeploy.sh oaic

19
00:01:30,001 --> 00:01:35,000
cd oaic

20
00:01:35,001 --> 00:01:40,000
chmod +x srsrandeploy.sh

21
00:01:40,001 --> 00:01:45,000
./srsrandeploy.sh

22
00:01:45,001 --> 00:01:50,000
cd ..

23
00:01:50,001 --> 00:01:55,000
Run the Network before Deploying the xApp

24
00:01:55,001 --> 00:02:00,000
srsEPC: Before deploying xApp make sure your network is up

25
00:02:00,001 --> 00:02:05,000
check to run EPC, en-gNB, near-RT RIC, and UE:

26
00:02:05,001 --> 00:02:10,000
sudo ip netns add ue1

27
00:02:10,001 --> 00:02:15,000
sudo ip netns list

28
00:02:15,001 --> 00:02:20,000
Now, in a new command window on Machine 1 run srsRAN EPC:

29
00:02:20,001 --> 00:02:25,000
sudo srsepc

30
00:02:25,001 --> 00:02:30,000
In a new command window on Machine 1 run srsRAN en-gNB.

31
00:02:30,001 --> 00:02:35,000
But before we start the en-gNB, we need to get the current machine's IP address

32
00:02:35,001 --> 00:02:40,000
and the IP address of the E2 Termination service at the near-RT RIC.

33
00:02:40,001 --> 00:02:45,000
export E2NODE_IP=`hostname -I | cut -f1 -d' '`

34
00:02:45,001 --> 00:02:50,000
export E2NODE_PORT=5006

35
00:02:50,001 --> 00:02:55,000
export E2TERM_IP=`sudo kubectl get svc -n ricplt --field-selector metadata.name=service-ricplt-e2term-sctp-alpha -o jsonpath='{.items[0].spec.clusterIP}'`

36
00:02:55,001 --> 00:03:00,000
Run srsENB

37
00:03:00,001 --> 00:03:05,000
sudo srsenb --enb.n_prb=50 --enb.name=enb1 --enb.enb_id=0x19B \

38
00:03:05,001 --> 00:03:10,000
--rf.device_name=zmq --rf.device_args="fail_on_disconnect=true,tx_port0=tcp://*:2000,rx_port0=tcp://localhost:2001,tx_port1=tcp://*:2100,rx_port1=tcp://localhost:2101,id=enb,base_srate=23.04e6" \

39
00:03:10,001 --> 00:03:15,000
--ric.agent.remote_ipv4_addr=${E2TERM_IP} --log.all_level=warn --ric.agent.log_level=debug --log.filename=stdout --ric.agent.local_ipv4_addr=${E2NODE_IP} --ric.agent.local_port=${E2NODE_PORT}

40
00:03:15,001 --> 00:03:20,000
Once the en-gNB is up and successfully connected to the near-RT RIC,

41
00:03:20,001 --> 00:03:25,000
you will see E2 Setup and E2 Response messages on the console.

42
00:03:25,001 --> 00:03:30,000
You will also see RIC Connection Initialized and RIC state established messages.

43
00:03:30,001 --> 00:03:35,000
In the new terminal:

44
00:03:35,001 --> 00:03:40,000
sudo srsue --gw.netns=ue1

45
00:03:40,001 --> 00:03:45,000
PING:

46
00:03:45,001 --> 00:03:50,000
This is the simplest way to test the network.

47
00:03:50,001 --> 00:03:55,000
This will test whether or not the UE and core can successfully communicate.

48
00:03:55,001 --> 00:04:00,000
The ping command should be executed on a new terminal from the UE's network space

49
00:04:00,001 --> 00:04:05,000
sudo ip netns exec ue1 ping 172.16.0.1

50
00:04:05,001 --> 00:04:10,000
cp -f -r kpimondeploy.sh oaic

51
00:04:10,001 --> 00:04:15,000
cd oaic

52
00:04:15,001 --> 00:04:20,000
chmod +x kpimondeploy.sh

53
00:04:20,001 --> 00:04:25,000
./kpimondeploy.sh

54
00:04:25,001 --> 00:04:30,000
Verifying xApp Deployment

55
00:04:30,001 --> 00:04:35,000
There should be a ricxapp-scp-kpimon pod in ricxapp namespace

56
00:04:35,001 --> 00:04:40,000
sudo kubectl get pods -A

57
00:04:40,001 --> 00:04:45,000
We can check the xApp logs using

58
00:04:45,001 --> 00:04:50,000
sudo kubectl logs -f -n ricxapp -l app=ricxapp-scp-kpimon

59
00:04:50,001 --> 00:04:55,000
Since the E2 Node is already up and running and the Key Performance Metrics (KPM) RAN function is enabled by default,

60
00:04:55,001 --> 00:05:00,000
the xApp will be able to subscribe to the E2 Node and start getting INDICATION messages.

61
00:05:00,001 --> 00:05:05,000
The decoded message containing information about the metrics is stored in the kpimon.log within the pod.

62
00 &#8203;:citation[oaicite:0]{index=0}&#8203;
