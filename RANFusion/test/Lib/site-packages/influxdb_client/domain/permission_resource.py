# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401


class PermissionResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'org_id': 'str',
        'org': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'org_id': 'orgID',
        'org': 'org'
    }

    def __init__(self, type=None, id=None, name=None, org_id=None, org=None):  # noqa: E501,D401,D403
        """PermissionResource - a model defined in OpenAPI."""  # noqa: E501
        self._type = None
        self._id = None
        self._name = None
        self._org_id = None
        self._org = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if org is not None:
            self.org = org

    @property
    def type(self):
        """Get the type of this PermissionResource.

        A resource type. Identifies the API resource's type (or _kind_).

        :return: The type of this PermissionResource.
        :rtype: str
        """  # noqa: E501
        return self._type

    @type.setter
    def type(self, type):
        """Set the type of this PermissionResource.

        A resource type. Identifies the API resource's type (or _kind_).

        :param type: The type of this PermissionResource.
        :type: str
        """  # noqa: E501
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def id(self):
        """Get the id of this PermissionResource.

        A resource ID. Identifies a specific resource.

        :return: The id of this PermissionResource.
        :rtype: str
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this PermissionResource.

        A resource ID. Identifies a specific resource.

        :param id: The id of this PermissionResource.
        :type: str
        """  # noqa: E501
        self._id = id

    @property
    def name(self):
        """Get the name of this PermissionResource.

        The name of the resource. _Note: not all resource types have a `name` property_.

        :return: The name of this PermissionResource.
        :rtype: str
        """  # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        """Set the name of this PermissionResource.

        The name of the resource. _Note: not all resource types have a `name` property_.

        :param name: The name of this PermissionResource.
        :type: str
        """  # noqa: E501
        self._name = name

    @property
    def org_id(self):
        """Get the org_id of this PermissionResource.

        An organization ID. Identifies the organization that owns the resource.

        :return: The org_id of this PermissionResource.
        :rtype: str
        """  # noqa: E501
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Set the org_id of this PermissionResource.

        An organization ID. Identifies the organization that owns the resource.

        :param org_id: The org_id of this PermissionResource.
        :type: str
        """  # noqa: E501
        self._org_id = org_id

    @property
    def org(self):
        """Get the org of this PermissionResource.

        An organization name. The organization that owns the resource.

        :return: The org of this PermissionResource.
        :rtype: str
        """  # noqa: E501
        return self._org

    @org.setter
    def org(self, org):
        """Set the org of this PermissionResource.

        An organization name. The organization that owns the resource.

        :param org: The org of this PermissionResource.
        :type: str
        """  # noqa: E501
        self._org = org

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, PermissionResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
